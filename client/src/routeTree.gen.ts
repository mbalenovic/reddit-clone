/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UpdatePasswordRouteImport } from './routes/update-password'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as PasswordRecoveryRouteImport } from './routes/password-recovery'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AuthIndexRouteImport } from './routes/_auth/index'

const UpdatePasswordRoute = UpdatePasswordRouteImport.update({
  id: '/update-password',
  path: '/update-password',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordRecoveryRoute = PasswordRecoveryRouteImport.update({
  id: '/password-recovery',
  path: '/password-recovery',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/password-recovery': typeof PasswordRecoveryRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/update-password': typeof UpdatePasswordRoute
  '/': typeof AuthIndexRoute
}
export interface FileRoutesByTo {
  '/password-recovery': typeof PasswordRecoveryRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/update-password': typeof UpdatePasswordRoute
  '/': typeof AuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteWithChildren
  '/password-recovery': typeof PasswordRecoveryRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/update-password': typeof UpdatePasswordRoute
  '/_auth/': typeof AuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/password-recovery'
    | '/signin'
    | '/signup'
    | '/update-password'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/password-recovery' | '/signin' | '/signup' | '/update-password' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/password-recovery'
    | '/signin'
    | '/signup'
    | '/update-password'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  PasswordRecoveryRoute: typeof PasswordRecoveryRoute
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
  UpdatePasswordRoute: typeof UpdatePasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/update-password': {
      id: '/update-password'
      path: '/update-password'
      fullPath: '/update-password'
      preLoaderRoute: typeof UpdatePasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password-recovery': {
      id: '/password-recovery'
      path: '/password-recovery'
      fullPath: '/password-recovery'
      preLoaderRoute: typeof PasswordRecoveryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  PasswordRecoveryRoute: PasswordRecoveryRoute,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
  UpdatePasswordRoute: UpdatePasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
